import json
import os
import asyncio
import aiohttp

from aiogram import Bot, Dispatcher, types, F
from aiogram.types import (
    Message, FSInputFile, InlineKeyboardMarkup, InlineKeyboardButton,
    KeyboardButton, ReplyKeyboardMarkup
)
from aiogram.enums import ParseMode
from aiogram.client.default import DefaultBotProperties
from dotenv import load_dotenv

from places import get_random_places, get_directions_image_url

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ---
load_dotenv()
BOT_TOKEN   = os.getenv("BOT_TOKEN")
MY_ID       = int(os.getenv("MY_ID", "909231739"))
PUMB_URL    = "https://mobile-app.pumb.ua/VDdaNY9UzYmaK4fj8"
USERS_FILE  = "users.json"

bot = Bot(token=BOT_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp  = Dispatcher()

# –°–æ—Å—Ç–æ—è–Ω–∏—è
user_booking_state  : dict[int,str]   = {}
user_feedback_state : dict[int,bool]  = {}

# --- –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è users.json ---
def save_user(user_id: int):
    try:
        with open(USERS_FILE, "r", encoding="utf-8") as f:
            users = json.load(f)
    except (FileNotFoundError, json.JSONDecodeError):
        users = []
    if user_id not in users:
        users.append(user_id)
        with open(USERS_FILE, "w", encoding="utf-8") as f:
            json.dump(users, f, ensure_ascii=False, indent=2)

async def broadcast(text: str):
    try:
        with open(USERS_FILE, "r", encoding="utf-8") as f:
            users = json.load(f)
    except (FileNotFoundError, json.JSONDecodeError):
        users = []
    for uid in users:
        try:
            await bot.send_message(uid, text)
        except:
            pass

# --- /start –∏ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ---
@dp.message(F.text == "/start")
async def cmd_start(message: Message):
    save_user(message.from_user.id)
    kb = ReplyKeyboardMarkup(resize_keyboard=True, keyboard=[
        [KeyboardButton("–©–æ —Ü–µ —Ç–∞–∫–µ?"), KeyboardButton("–Ø–∫ —Ü–µ –ø—Ä–∞—Ü—é—î?")],
        [KeyboardButton("–í–∏—Ä—É—à–∏—Ç–∏ –Ω–∞ –ø—Ä–æ–≥—É–ª—è–Ω–∫—É")],
        [KeyboardButton("–í–∞—Ä—ñ–∞–Ω—Ç–∏ –º–∞—Ä—à—Ä—É—Ç—ñ–≤")],
        [KeyboardButton("–í—ñ–¥–≥—É–∫–∏")],
        [KeyboardButton("–ó–∞–º–æ–≤–∏—Ç–∏ –ø—Ä–æ–≥—É–ª—è–Ω–∫—É –∑—ñ –º–Ω–æ—é")],
        [KeyboardButton("–ü—ñ–¥—Ç—Ä–∏–º–∞—Ç–∏ –ø—Ä–æ—î–∫—Ç \"–û–¥–µ—Å–∞ –ù–∞–≤–º–∞–Ω–Ω—è\"")]
    ])
    photo = FSInputFile("odesa_logo.jpg")
    await message.answer_photo(photo, caption=(
        "<b>–ü—Ä–∏–≤—ñ—Ç!</b> –¶–µ <i>–û–¥–µ—Å—Å–∞ –Ω–∞–≤–º–∞–Ω–Ω—è</i> ‚Äî —Ç–≤–æ—è –Ω–µ—Å–ø–æ–¥—ñ–≤–∞–Ω–∞, –∞–ª–µ –ø—Ä–æ–¥—É–º–∞–Ω–∞ –µ–∫—Å–∫—É—Ä—Å—ñ—è –º—ñ—Å—Ç–æ–º.\n\n"
        "–¢–∏ –Ω–µ –æ–±–∏—Ä–∞—î—à –º–∞—Ä—à—Ä—É—Ç ‚Äî –º–∞—Ä—à—Ä—É—Ç –æ–±–∏—Ä–∞—î —Ç–µ–±–µ.\n\n"
        "–û–±–µ—Ä–∏, –∑ —á–æ–≥–æ —Ö–æ—á–µ—à –ø–æ—á–∞—Ç–∏ üëá"
    ), reply_markup=kb)

# --- –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã ---
@dp.message(F.text == "–©–æ —Ü–µ —Ç–∞–∫–µ?")
async def what_is_it(message: Message):
    await message.answer(
        "‚Äú–û–¥–µ—Å—Å–∞ –Ω–∞–≤–º–∞–Ω–Ω—è‚Äù ‚Äî Telegram-–±–æ—Ç, —è–∫–∏–π –æ–±–∏—Ä–∞—î –º–∞—Ä—à—Ä—É—Ç –ø–æ –û–¥–µ—Å—ñ –∑–∞–º—ñ—Å—Ç—å —Ç–µ–±–µ.\n"
        "–¢–∏—Å–Ω–∏ –∫–Ω–æ–ø–∫—É ‚Äî –æ—Ç—Ä–∏–º–∞–π –º–∞—Ä—à—Ä—É—Ç —ñ–∑ 3, 5 –∞–±–æ 10 –ª–æ–∫–∞—Ü—ñ–π."
    )

@dp.message(F.text == "–Ø–∫ —Ü–µ –ø—Ä–∞—Ü—é—î?")
async def how_it_works(message: Message):
    await message.answer(
        "1Ô∏è‚É£ –û–±–∏—Ä–∞—î—à –∫—ñ–ª—å–∫—ñ—Å—Ç—å –ª–æ–∫–∞—Ü—ñ–π\n"
        "2Ô∏è‚É£ –û—Ç—Ä–∏–º—É—î—à –º–∞—Ä—à—Ä—É—Ç —ñ –∫–∞—Ä—Ç—É\n"
        "3Ô∏è‚É£ –ô–¥–µ—à –≥—É–ª—è—Ç–∏\n"
        "4Ô∏è‚É£ –î—ñ–ª–∏—à—Å—è –≤—Ä–∞–∂–µ–Ω–Ω—è–º–∏"
    )

@dp.message(F.text == "–í–∞—Ä—ñ–∞–Ω—Ç–∏ –º–∞—Ä—à—Ä—É—Ç—ñ–≤")
async def routes_options(message: Message):
    await message.answer(
        "üî∏ 3 –ª–æ–∫–∞—Ü—ñ—ó ‚Äî –∫–æ—Ä–æ—Ç–∫–∞ –ø—Ä–æ–≥—É–ª—è–Ω–∫–∞\n"
        "üî∏ 5 –ª–æ–∫–∞—Ü—ñ–π ‚Äî –Ω–∞ –ø—ñ–≤ –¥–Ω—è\n"
        "üî∏ 10 –ª–æ–∫–∞—Ü—ñ–π ‚Äî —Å–ø—Ä–∞–≤–∂–Ω—è –ø—Ä–∏–≥–æ–¥–∞!"
    )

@dp.message(F.text == "–í—ñ–¥–≥—É–∫–∏")
async def reviews(message: Message):
    await message.answer(
        "üîπ ¬´–ö–∞–π—Ñ! –î—É–∂–µ –∞—Ç–º–æ—Å—Ñ–µ—Ä–Ω–æ¬ª\n"
        "üîπ ¬´–î—É–º–∞–≤, —â–æ –∑–Ω–∞—é –û–¥–µ—Å—É ‚Äî –∞–ª–µ –±–æ—Ç –∑–¥–∏–≤—É–≤–∞–≤¬ª\n"
        "üîπ ¬´–ë—Ä–∞–ª–∏ –º–∞—Ä—à—Ä—É—Ç –≤—Ç—Ä—å–æ—Ö ‚Äî –±—É–ª–æ –∫—Ä—É—Ç–æ!¬ª"
    )

@dp.message(F.text == "–ü—ñ–¥—Ç—Ä–∏–º–∞—Ç–∏ –ø—Ä–æ—î–∫—Ç \"–û–¥–µ—Å–∞ –ù–∞–≤–º–∞–Ω–Ω—è\"")
async def donate_handler(message: Message):
    kb = InlineKeyboardMarkup([[InlineKeyboardButton("üíõ –ü—ñ–¥—Ç—Ä–∏–º–∞—Ç–∏ –ø—Ä–æ—î–∫—Ç", url=PUMB_URL)]])
    await message.answer("–î—è–∫—É—î–º–æ –∑–∞ –ø—ñ–¥—Ç—Ä–∏–º–∫—É! üôè", reply_markup=kb)

# --- –ó–∞–∫–∞–∑ –ø—Ä–æ–≥—É–ª–∫–∏ ---
@dp.message(F.text == "–ó–∞–º–æ–≤–∏—Ç–∏ –ø—Ä–æ–≥—É–ª—è–Ω–∫—É –∑—ñ –º–Ω–æ—é")
async def book_me(message: Message):
    kb = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True, keyboard=[
        [KeyboardButton("–ù–∞–≤–º–∞–Ω–Ω—è 3 –ª–æ–∫–∞—Ü—ñ—ó")],
        [KeyboardButton("–ù–∞–≤–º–∞–Ω–Ω—è 5 –ª–æ–∫–∞—Ü—ñ–π")],
        [KeyboardButton("–ú—ñ–π —É–ª—é–±–ª–µ–Ω–∏–π –º–∞—Ä—à—Ä—É—Ç –≤ –û–¥–µ—Å—ñ")]
    ])
    user_booking_state[message.from_user.id] = "waiting_choice"
    await message.answer("–û–±–µ—Ä–∏ –º–∞—Ä—à—Ä—É—Ç:", reply_markup=kb)

@dp.message(F.text.in_(["–ù–∞–≤–º–∞–Ω–Ω—è 3 –ª–æ–∫–∞—Ü—ñ—ó","–ù–∞–≤–º–∞–Ω–Ω—è 5 –ª–æ–∫–∞—Ü—ñ–π","–ú—ñ–π —É–ª—é–±–ª–µ–Ω–∏–π –º–∞—Ä—à—Ä—É—Ç –≤ –û–¥–µ—Å—ñ"]))
async def request_phone(message: Message):
    if user_booking_state.get(message.from_user.id) == "waiting_choice":
        user_booking_state[message.from_user.id] = message.text
        kb = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True, keyboard=[
            [KeyboardButton("üìû –ü–æ–¥—ñ–ª–∏—Ç–∏—Å—è –Ω–æ–º–µ—Ä–æ–º", request_contact=True)]
        ])
        await message.answer("–ü–æ–¥—ñ–ª–∏—Å—å –Ω–æ–º–µ—Ä–æ–º:", reply_markup=kb)

@dp.message(F.contact)
async def received_contact(message: Message):
    choice = user_booking_state.pop(message.from_user.id, "‚Äî")
    summary = (
        f"üì© <b>–ù–æ–≤–∏–π –∑–∞–∫–∞–∑</b>:\n"
        f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á: @{message.from_user.username or message.from_user.first_name}\n"
        f"–ú–∞—Ä—à—Ä—É—Ç: {choice}\n"
        f"–¢–µ–ª–µ—Ñ–æ–Ω: {message.contact.phone_number}"
    )
    await bot.send_message(MY_ID, summary)
    await message.answer("–î—è–∫—É—é! –Ø –∑–≤‚Äô—è–∂—É—Å—å –∑ —Ç–æ–±–æ—é.")

# --- –ü—Ä–æ–≥—É–ª–∫–∞ ---
@dp.message(F.text == "–í–∏—Ä—É—à–∏—Ç–∏ –Ω–∞ –ø—Ä–æ–≥—É–ª—è–Ω–∫—É")
async def start_walk(message: Message):
    kb = ReplyKeyboardMarkup(resize_keyboard=True, keyboard=[
        [KeyboardButton("üéØ –†–∞–Ω–¥–æ–º –∑ 3 –ª–æ–∫–∞—Ü—ñ–π")],
        [KeyboardButton("üéØ –†–∞–Ω–¥–æ–º –∑ 5 –ª–æ–∫–∞—Ü—ñ–π")],
        [KeyboardButton("üéØ –†–∞–Ω–¥–æ–º –∑ 10 –ª–æ–∫–∞—Ü—ñ–π")],
        [KeyboardButton("üåü –§—ñ—Ä–º–æ–≤–∏–π –º–∞—Ä—à—Ä—É—Ç")],
        [KeyboardButton("‚¨Ö –ù–∞–∑–∞–¥")]
    ])
    await message.answer("–û–±–µ—Ä–∏ —Ç–∏–ø –º–∞—Ä—à—Ä—É—Ç—É:", reply_markup=kb)

@dp.message(F.text == "‚¨Ö –ù–∞–∑–∞–¥")
async def go_back(message: Message):
    await cmd_start(message)

@dp.message(F.text.startswith("üéØ –†–∞–Ω–¥–æ–º –∑"))
async def route_handler(message: Message):
    count = int(message.text.split(" ")[2])
    await send_route(message, count)

async def send_route(message: Message, count: int):
    await message.answer("üîÑ –®—É–∫–∞—é –ª–æ–∫–∞—Ü—ñ—ó‚Ä¶")
    places = get_random_places(count)
    for i,p in enumerate(places,1):
        cap = f"<b>{i}. {p['name']}</b>\n{p.get('address','')}"
        kb = InlineKeyboardMarkup([[InlineKeyboardButton("üó∫ –í—ñ–¥–∫—Ä–∏—Ç–∏", url=p["url"])]])
        if p.get("photo"):
            await message.answer_photo(p["photo"], cap, reply_markup=kb)
        else:
            await message.answer(cap, reply_markup=kb)
    maps_link, static_url = get_directions_image_url(places)
    if static_url:
        async with aiohttp.ClientSession() as s:
            r = await s.get(static_url)
            if r.status==200:
                data=await r.read()
                await message.answer_photo(types.BufferedInputFile(data,"route.png"),"üó∫ –ú–∞—Ä—à—Ä—É—Ç")
    if maps_link:
        await message.answer(f"üîó Google Maps:\n{maps_link}")
    btns = InlineKeyboardMarkup([
        [InlineKeyboardButton("üíõ –ü—ñ–¥—Ç—Ä–∏–º–∞—Ç–∏", url=PUMB_URL)],
        [InlineKeyboardButton("‚úçÔ∏è –í—ñ–¥–≥—É–∫", callback_data="leave_feedback")]
    ])
    await message.answer("–í—Ä–∞–∂–µ–Ω–Ω—è?", reply_markup=btns)

# --- –§—ñ—Ä–º–æ–≤–∏–π –º–∞—Ä—à—Ä—É—Ç ---
@dp.message(F.text == "üåü –§—ñ—Ä–º–æ–≤–∏–π –º–∞—Ä—à—Ä—É—Ç")
async def firm_route(message: Message):
    await message.answer("üîÑ –°–∫–ª–∞–¥–∞—é —Ñ—ñ—Ä–º–æ–≤–∏–π –º–∞—Ä—à—Ä—É—Ç‚Ä¶")
    hist = ["museum","art_gallery","library","church","synagogue","park","tourist_attraction"]
    first = get_random_places(1, allowed_types=hist)[0]
    kb = InlineKeyboardMarkup([
        [InlineKeyboardButton("‚û°Ô∏è GPS-—Ä–∞–Ω–¥–æ–º", callback_data="to_gps")],
        [InlineKeyboardButton("‚¨Ö –ù–∞–∑–∞–¥", callback_data="back_to_menu")]
    ])
    await message.answer(
        f"1Ô∏è‚É£ <b>{first['name']}</b>\nüìç {first['address']}",
        reply_markup=kb
    )

@dp.callback_query(F.data == "to_gps")
async def to_gps(cb: types.CallbackQuery):
    import random
    lat0,lon0,r=46.4825,30.7233,0.045
    lat,lon=lat0+random.uniform(-r,r),lon0+random.uniform(-r,r)
    url=f"https://maps.google.com/?q={lat},{lon}"
    kb=InlineKeyboardMarkup([
        [InlineKeyboardButton("‚û°Ô∏è –ì–∞—Å—Ç—Ä–æ-—Ç–æ—á–∫–∞", callback_data="to_food")],
        [InlineKeyboardButton("‚¨Ö –ù–∞–∑–∞–¥", callback_data="back_to_menu")]
    ])
    await cb.message.answer(f"2Ô∏è‚É£ –í–∏–ø–∞–¥–∫–æ–≤–∞ —Ç–æ—á–∫–∞\nüìç {lat:.5f},{lon:.5f}", reply_markup=kb)

@dp.callback_query(F.data == "to_food")
async def to_food(cb: types.CallbackQuery):
    food = get_random_places(1, allowed_types=["restaurant","cafe","bakery"])[0]
    kb = InlineKeyboardMarkup([
        [InlineKeyboardButton("üé≤ –ë—é–¥–∂–µ—Ç", callback_data="roll_budget")],
        [InlineKeyboardButton("‚¨Ö –ù–∞–∑–∞–¥", callback_data="back_to_menu")]
    ])
    await cb.message.answer(f"3Ô∏è‚É£ <b>{food['name']}</b>\nüìç {food['address']}", reply_markup=kb)

@dp.callback_query(F.data == "roll_budget")
async def roll_budget(cb: types.CallbackQuery):
    import random
    b = random.choice(["10 –≥—Ä–Ω","50 –≥—Ä–Ω","100 –≥—Ä–Ω","300 –≥—Ä–Ω","500 –≥—Ä–Ω","–©–æ –ø–æ—Ä–∞–¥–∏—Ç—å –æ—Ñ—ñ—Ü—ñ–∞–Ω—Ç"])
    kb = InlineKeyboardMarkup([[InlineKeyboardButton("‚¨Ö –ù–∞–∑–∞–¥", callback_data="back_to_menu")]])
    await cb.message.answer(f"üéØ –ë—é–¥–∂–µ—Ç: <b>{b}</b>", reply_markup=kb)

@dp.callback_query(F.data == "back_to_menu")
async def back_menu(cb: types.CallbackQuery):
    await cmd_start(cb.message)

# --- –í—ñ–¥–≥—É–∫–∏ ---
@dp.callback_query(F.data == "leave_feedback")
async def ask_feedback(cb: types.CallbackQuery):
    user_feedback_state[cb.from_user.id] = True
    await cb.message.answer("–ù–∞–ø–∏—à–∏ –≤—ñ–¥–≥—É–∫ —ñ –º–æ–∂–µ—à –¥–æ–¥–∞—Ç–∏ —Ñ–æ—Ç–æ.")

@dp.message(F.photo | F.text)
async def collect_feedback(message: Message):
    if user_feedback_state.pop(message.from_user.id, False):
        await message.answer("–î—è–∫—É—é –∑–∞ –≤—ñ–¥–≥—É–∫! üíå")

# --- –ê–¥–º–∏–Ω: —Ä–∞—Å—Å—ã–ª–∫–∞ ---
@dp.message(F.text.startswith("/broadcast"))
async def cmd_broadcast(message: Message):
    if message.from_user.id != MY_ID:
        return
    parts = message.text.split(" ",1)
    if len(parts)<2:
        await message.answer("–í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è: /broadcast –¢–µ–∫—Å—Ç –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è")
        return
    await message.answer("–†–æ–∑—Å–∏–ª–∞—é‚Ä¶")
    await broadcast(parts[1])
    await message.answer("‚úÖ –†–æ–∑—Å–∏–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")

async def main():
    await bot.delete_webhook(drop_pending_updates=True)
    await dp.start_polling(bot)

if __name__=="__main__":
    asyncio.run(main())
