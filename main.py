from aiogram import Bot, Dispatcher, types, F
from aiogram.types import (
    Message, FSInputFile, InlineKeyboardMarkup, InlineKeyboardButton,
    KeyboardButton, ReplyKeyboardMarkup
)
from aiogram.enums import ParseMode
from aiogram.client.default import DefaultBotProperties
from dotenv import load_dotenv
import asyncio
import os
import aiohttp

from places import get_random_places, get_directions_image_url

load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")
MY_ID = int(os.getenv("MY_ID", "909231739"))
PUMB_URL = "https://mobile-app.pumb.ua/VDdaNY9UzYmaK4fj8"

bot = Bot(token=BOT_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher()
user_feedback_state = {}
user_booking_state = {}

@dp.message(F.text == "/start")
async def start_handler(message: Message):
    kb = ReplyKeyboardMarkup(resize_keyboard=True, keyboard=[
        [KeyboardButton(text="–©–æ —Ü–µ —Ç–∞–∫–µ?"), KeyboardButton(text="–Ø–∫ —Ü–µ –ø—Ä–∞—Ü—é—î?")],
        [KeyboardButton(text="–í–∏—Ä—É—à–∏—Ç–∏ –Ω–∞ –ø—Ä–æ–≥—É–ª—è–Ω–∫—É")],
        [KeyboardButton(text="–í–∞—Ä—ñ–∞–Ω—Ç–∏ –º–∞—Ä—à—Ä—É—Ç—ñ–≤")],
        [KeyboardButton(text="–í—ñ–¥–≥—É–∫–∏")],
        [KeyboardButton(text="–ó–∞–º–æ–≤–∏—Ç–∏ –ø—Ä–æ–≥—É–ª—è–Ω–∫—É –∑—ñ –º–Ω–æ—é")],
        [KeyboardButton(text="–ü—ñ–¥—Ç—Ä–∏–º–∞—Ç–∏ –ø—Ä–æ—î–∫—Ç \"–û–¥–µ—Å–∞ –ù–∞–≤–º–∞–Ω–Ω—è\"")]
    ])
    photo = FSInputFile("odesa_logo.jpg")
    await message.answer_photo(
        photo=photo,
        caption="<b>–ü—Ä–∏–≤—ñ—Ç!</b> –¶–µ <i>–û–¥–µ—Å—Å–∞ –Ω–∞–≤–º–∞–Ω–Ω—è</i> ‚Äî —Ç–≤–æ—è –Ω–µ—Å–ø–æ–¥—ñ–≤–∞–Ω–∞, –∞–ª–µ –ø—Ä–æ–¥—É–º–∞–Ω–∞ –µ–∫—Å–∫—É—Ä—Å—ñ—è –º—ñ—Å—Ç–æ–º.\n\n–¢–∏ –Ω–µ –æ–±–∏—Ä–∞—î—à –º–∞—Ä—à—Ä—É—Ç ‚Äî –º–∞—Ä—à—Ä—É—Ç –æ–±–∏—Ä–∞—î —Ç–µ–±–µ.\n\n–û–±–µ—Ä–∏, –∑ —á–æ–≥–æ —Ö–æ—á–µ—à –ø–æ—á–∞—Ç–∏ üëá",
        reply_markup=kb
    )

@dp.message(F.text == "–©–æ —Ü–µ —Ç–∞–∫–µ?")
async def what_is_it(message: Message):
    await message.answer("‚Äú–û–¥–µ—Å—Å–∞ –Ω–∞–≤–º–∞–Ω–Ω—è‚Äù ‚Äî Telegram-–±–æ—Ç, —è–∫–∏–π –æ–±–∏—Ä–∞—î –º–∞—Ä—à—Ä—É—Ç –ø–æ –û–¥–µ—Å—ñ –∑–∞–º—ñ—Å—Ç—å —Ç–µ–±–µ.\n–¢–∏—Å–Ω–∏ –∫–Ω–æ–ø–∫—É ‚Äî –æ—Ç—Ä–∏–º–∞–π –º–∞—Ä—à—Ä—É—Ç —ñ–∑ 3, 5 –∞–±–æ 10 –ª–æ–∫–∞—Ü—ñ–π.")

@dp.message(F.text == "–Ø–∫ —Ü–µ –ø—Ä–∞—Ü—é—î?")
async def how_it_works(message: Message):
    await message.answer("1Ô∏è‚É£ –û–±–∏—Ä–∞—î—à –∫—ñ–ª—å–∫—ñ—Å—Ç—å –ª–æ–∫–∞—Ü—ñ–π\n2Ô∏è‚É£ –û—Ç—Ä–∏–º—É—î—à –º–∞—Ä—à—Ä—É—Ç —ñ –∫–∞—Ä—Ç—É\n3Ô∏è‚É£ –ô–¥–µ—à –≥—É–ª—è—Ç–∏\n4Ô∏è‚É£ –î—ñ–ª–∏—à—Å—è –≤—Ä–∞–∂–µ–Ω–Ω—è–º–∏")

@dp.message(F.text == "–í–∞—Ä—ñ–∞–Ω—Ç–∏ –º–∞—Ä—à—Ä—É—Ç—ñ–≤")
async def routes_options(message: Message):
    await message.answer("üî∏ 3 –ª–æ–∫–∞—Ü—ñ—ó ‚Äî –∫–æ—Ä–æ—Ç–∫–∞ –ø—Ä–æ–≥—É–ª—è–Ω–∫–∞\nüî∏ 5 –ª–æ–∫–∞—Ü—ñ–π ‚Äî –Ω–∞ –ø—ñ–≤ –¥–Ω—è\nüî∏ 10 –ª–æ–∫–∞—Ü—ñ–π ‚Äî —Å–ø—Ä–∞–≤–∂–Ω—è –ø—Ä–∏–≥–æ–¥–∞!")

@dp.message(F.text == "–í—ñ–¥–≥—É–∫–∏")
async def reviews(message: Message):
    await message.answer("üîπ ¬´–ö–∞–π—Ñ! –î—É–∂–µ –∞—Ç–º–æ—Å—Ñ–µ—Ä–Ω–æ¬ª\nüîπ ¬´–î—É–º–∞–≤, —â–æ –∑–Ω–∞—é –û–¥–µ—Å—É ‚Äî –∞–ª–µ –±–æ—Ç –∑–¥–∏–≤—É–≤–∞–≤¬ª\nüîπ ¬´–ë—Ä–∞–ª–∏ –º–∞—Ä—à—Ä—É—Ç –≤—Ç—Ä—å–æ—Ö ‚Äî –±—É–ª–æ –∫—Ä—É—Ç–æ!¬ª")

@dp.message(F.text == "–ü—ñ–¥—Ç—Ä–∏–º–∞—Ç–∏ –ø—Ä–æ—î–∫—Ç \"–û–¥–µ—Å–∞ –ù–∞–≤–º–∞–Ω–Ω—è\"")
async def donate_handler(message: Message):
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üíõ –ü—ñ–¥—Ç—Ä–∏–º–∞—Ç–∏ –ø—Ä–æ—î–∫—Ç", url=PUMB_URL)]
    ])
    await message.answer("–î—è–∫—É—î–º–æ –∑–∞ –ø—ñ–¥—Ç—Ä–∏–º–∫—É! üôè", reply_markup=keyboard)

@dp.message(F.text == "–ó–∞–º–æ–≤–∏—Ç–∏ –ø—Ä–æ–≥—É–ª—è–Ω–∫—É –∑—ñ –º–Ω–æ—é")
async def book_me(message: Message):
    kb = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True, keyboard=[
        [KeyboardButton(text="–ù–∞–≤–º–∞–Ω–Ω—è 3 –ª–æ–∫–∞—Ü—ñ—ó")],
        [KeyboardButton(text="–ù–∞–≤–º–∞–Ω–Ω—è 5 –ª–æ–∫–∞—Ü—ñ–π")],
        [KeyboardButton(text="–ú—ñ–π —É–ª—é–±–ª–µ–Ω–∏–π –º–∞—Ä—à—Ä—É—Ç –≤ –û–¥–µ—Å—ñ")]
    ])
    await message.answer("–û–±–µ—Ä–∏ –º–∞—Ä—à—Ä—É—Ç, —è–∫–∏–π —Ç–æ–±—ñ —Ü—ñ–∫–∞–≤–∏–π:", reply_markup=kb)
    user_booking_state[message.from_user.id] = "waiting_choice"

@dp.message(F.text.in_(["–ù–∞–≤–º–∞–Ω–Ω—è 3 –ª–æ–∫–∞—Ü—ñ—ó", "–ù–∞–≤–º–∞–Ω–Ω—è 5 –ª–æ–∫–∞—Ü—ñ–π", "–ú—ñ–π —É–ª—é–±–ª–µ–Ω–∏–π –º–∞—Ä—à—Ä—É—Ç –≤ –û–¥–µ—Å—ñ"]))
async def request_phone(message: Message):
    if user_booking_state.get(message.from_user.id) == "waiting_choice":
        contact_kb = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True, keyboard=[
            [KeyboardButton(text="üìû –ü–æ–¥—ñ–ª–∏—Ç–∏—Å—è –Ω–æ–º–µ—Ä–æ–º", request_contact=True)]
        ])
        user_booking_state[message.from_user.id] = message.text
        await message.answer("–ü–æ–¥—ñ–ª–∏—Å—å —Å–≤–æ—ó–º –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω—É üëá", reply_markup=contact_kb)

@dp.message(F.contact)
async def received_contact(message: Message):
    choice = user_booking_state.pop(message.from_user.id, "–Ω–µ–≤—ñ–¥–æ–º–æ")
    contact = message.contact.phone_number
    text = f"üì© –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è:\n–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á: @{message.from_user.username or message.from_user.first_name}\n–ú–∞—Ä—à—Ä—É—Ç: {choice}\n–¢–µ–ª–µ—Ñ–æ–Ω: {contact}"
    await bot.send_message(MY_ID, text)
    await message.answer("–î—è–∫—É—é! –Ø –Ω–∞–ø–∏—à—É –Ω–∞–π–±–ª–∏–∂—á–∏–º —á–∞—Å–æ–º üí¨")

@dp.message(F.text == "–í–∏—Ä—É—à–∏—Ç–∏ –Ω–∞ –ø—Ä–æ–≥—É–ª—è–Ω–∫—É")
async def start_walk(message: Message):
    kb = ReplyKeyboardMarkup(resize_keyboard=True, keyboard=[
        [KeyboardButton(text="üéØ –†–∞–Ω–¥–æ–º –∑ 3 –ª–æ–∫–∞—Ü—ñ–π")],
        [KeyboardButton(text="üéØ –†–∞–Ω–¥–æ–º –∑ 5 –ª–æ–∫–∞—Ü—ñ–π")],
        [KeyboardButton(text="üéØ –†–∞–Ω–¥–æ–º –∑ 10 –ª–æ–∫–∞—Ü—ñ–π")],
        [KeyboardButton(text="üåü –§—ñ—Ä–º–æ–≤–∏–π –º–∞—Ä—à—Ä—É—Ç")]
    ])
    await message.answer("–û–±–µ—Ä–∏ —Ç–∏–ø –º–∞—Ä—à—Ä—É—Ç—É üëá", reply_markup=kb)

@dp.message(F.text == "‚¨Ö –ù–∞–∑–∞–¥")
async def go_back(message: Message):
    await start_handler(message)

@dp.message(F.text.startswith("üéØ –†–∞–Ω–¥–æ–º –∑"))
async def route_handler(message: Message):
    count = 3 if "3" in message.text else 5 if "5" in message.text else 10
    await send_route(message, count)

async def send_route(message: Message, count: int):
    await message.answer("üîÑ –®—É–∫–∞—é —Ü—ñ–∫–∞–≤—ñ –º—ñ—Å—Ü—è –Ω–∞ –º–∞–ø—ñ‚Ä¶")
    places = get_random_places(count)

    if not places:
        await message.reply("–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ –ª–æ–∫–∞—Ü—ñ—ó üòû")
        return

    for i, place in enumerate(places, 1):
        caption = f"<b>{i}. {place['name']}</b>\n"
        if place.get("rating"):
            caption += f"‚≠ê {place['rating']} ({place.get('reviews', 0)} –≤—ñ–¥–≥—É–∫—ñ–≤)\n"
        caption += f"{place.get('address', '')}"
        kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üó∫ –í—ñ–¥–∫—Ä–∏—Ç–∏ –Ω–∞ –º–∞–ø—ñ", url=place["url"])]
        ])
        if place.get("photo"):
            await message.answer_photo(photo=place["photo"], caption=caption, reply_markup=kb)
        else:
            await message.answer(caption, reply_markup=kb)

    # –ö–∞—Ä—Ç–∏–Ω–∫–∞ + –º–∞—Ä—à—Ä—É—Ç
    maps_link, static_map_url = get_directions_image_url(places)
    if static_map_url:
        async with aiohttp.ClientSession() as session:
            async with session.get(static_map_url) as resp:
                if resp.status == 200:
                    photo_bytes = await resp.read()
                    await message.answer_photo(
                        types.BufferedInputFile(photo_bytes, filename="route.png"),
                        caption="üó∫ –ü–æ–±—É–¥–æ–≤–∞–Ω–∏–π –º–∞—Ä—à—Ä—É—Ç"
                    )
    if maps_link:
        await message.answer(f"üîó <b>–ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –º–∞—Ä—à—Ä—É—Ç —É Google Maps:</b>\n{maps_link}")

    # –í—ñ–¥–≥—É–∫ + –ø—ñ–¥—Ç—Ä–∏–º–∫–∞
    btns = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üíõ –ü—ñ–¥—Ç—Ä–∏–º–∞—Ç–∏ –ø—Ä–æ—î–∫—Ç", url=PUMB_URL)],
        [InlineKeyboardButton(text="‚úçÔ∏è –ó–∞–ª–∏—à–∏—Ç–∏ –≤—ñ–¥–≥—É–∫", callback_data="leave_feedback")]
    ])
    await message.answer("–©–æ —Å–∫–∞–∂–µ—à –ø—ñ—Å–ª—è –ø—Ä–æ–≥—É–ª—è–Ω–∫–∏?", reply_markup=btns)

@dp.callback_query(F.data == "leave_feedback")
async def ask_feedback(callback: types.CallbackQuery):
    user_feedback_state[callback.from_user.id] = True
    await callback.message.answer("–ù–∞–ø–∏—à–∏ —Å–≤—ñ–π –≤—ñ–¥–≥—É–∫ (–¥–æ 256 —Å–∏–º–≤–æ–ª—ñ–≤) —ñ –º–æ–∂–µ—à –¥–æ–¥–∞—Ç–∏ 1 —Ñ–æ—Ç–æ üìùüì∏")

@dp.message(F.photo | F.text)
async def collect_feedback(message: Message):
    if user_feedback_state.get(message.from_user.id):
        user_feedback_state[message.from_user.id] = False
        text = f"üìù –í—ñ–¥–≥—É–∫ –≤—ñ–¥ @{message.from_user.username or message.from_user.first_name}:\n"
        if message.text:
            text += message.text
        if message.photo:
            await bot.send_photo(MY_ID, photo=message.photo[-1].file_id, caption=text)
        else:
            await bot.send_message(MY_ID, text)
        await message.answer("–î—è–∫—É—é –∑–∞ –≤—ñ–¥–≥—É–∫! üíå", reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üíõ –ü—ñ–¥—Ç—Ä–∏–º–∞—Ç–∏ –ø—Ä–æ—î–∫—Ç", url=PUMB_URL)]
        ]))



# === –õ–û–ì–Ü–ö–ê –§–Ü–†–ú–û–í–û–ì–û –ú–ê–†–®–†–£–¢–£ ===
@dp.message(F.text.contains("–§—ñ—Ä–º–æ–≤–∏–π –º–∞—Ä—à—Ä—É—Ç"))
async def firmovyi_marshrut(message: Message):
    await message.answer("üîÑ –°—Ç–≤–æ—Ä—é—é —Ñ—ñ—Ä–º–æ–≤–∏–π –º–∞—Ä—à—Ä—É—Ç –∑ 3 —Ç–æ—á–æ–∫‚Ä¶")
    historical_types = ["museum", "art_gallery", "library", "church", "synagogue", "park", "monument", "tourist_attraction"]
    historical_place = get_random_places(n=1, allowed_types=historical_types)[0]
    kb1 = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚û°Ô∏è –î–∞–ª—ñ - GPS-—Ä–∞–Ω–¥–æ–º", callback_data="to_gps")],
        [InlineKeyboardButton(text="üíõ –ü—ñ–¥—Ç—Ä–∏–º–∞—Ç–∏ –ø—Ä–æ—î–∫—Ç", url=PUMB_URL)]
    ])
    await message.answer(
        f"1Ô∏è‚É£ <b>{historical_place['name']}</b>\nüìç {historical_place['address']}\n<a href='{historical_place['url']}'>üó∫ –í—ñ–¥–∫—Ä–∏—Ç–∏ –Ω–∞ –º–∞–ø—ñ</a>",
        reply_markup=kb1
    )

@dp.callback_query(F.data == "to_gps")
async def show_random_gps(callback: types.CallbackQuery):
    import random
    center_lat, center_lng = 46.4825, 30.7233
    radius = 0.045
    rand_lat = center_lat + random.uniform(-radius, radius)
    rand_lng = center_lng + random.uniform(-radius, radius)
    rand_url = f"https://maps.google.com/?q={rand_lat},{rand_lng}"
    kb2 = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚û°Ô∏è –î–∞–ª—ñ - –ì–∞—Å—Ç—Ä–æ-—Ç–æ—á–∫–∞", callback_data="to_food")],
        [InlineKeyboardButton(text="üíõ –ü—ñ–¥—Ç—Ä–∏–º–∞—Ç–∏ –ø—Ä–æ—î–∫—Ç", url=PUMB_URL)]
    ])
    await callback.message.answer(
        f"2Ô∏è‚É£ –í–∏–ø–∞–¥–∫–æ–≤–∞ —Ç–æ—á–∫–∞\nüìç –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏: {rand_lat:.5f}, {rand_lng:.5f}\n<a href='{rand_url}'>üó∫ –í—ñ–¥–∫—Ä–∏—Ç–∏ –Ω–∞ –º–∞–ø—ñ</a>",
        reply_markup=kb2
    )

@dp.callback_query(F.data == "to_food")
async def show_food_place(callback: types.CallbackQuery):
    food_types = ["restaurant", "cafe", "bakery"]
    food_place = get_random_places(n=1, allowed_types=food_types)[0]
    kb3 = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üé≤ –û–±–µ—Ä–∏ –±—é–¥–∂–µ—Ç –∑ –∫—É–±–∏–∫–∞", callback_data="roll_budget")],
        [InlineKeyboardButton(text="üíõ –ü—ñ–¥—Ç—Ä–∏–º–∞—Ç–∏ –ø—Ä–æ—î–∫—Ç", url=PUMB_URL)]
    ])
    await callback.message.answer(
        f"3Ô∏è‚É£ <b>{food_place['name']}</b>\nüìç {food_place['address']}\n<a href='{food_place['url']}'>üó∫ –í—ñ–¥–∫—Ä–∏—Ç–∏ –Ω–∞ –º–∞–ø—ñ</a>",
        reply_markup=kb3
    )

@dp.callback_query(F.data == "roll_budget")
async def roll_budget(callback: types.CallbackQuery):
    import random
    budgets = [
        "10 –≥—Ä–Ω ‚Äî —Å–º–∞–∫ –≤–∏–∂–∏–≤–∞–Ω–Ω—è",
        "50 –≥—Ä–Ω ‚Äî –±–∞–∑–∞—Ä–Ω–∏–π –¥–µ–ª—é–∫—Å",
        "100 –≥—Ä–Ω ‚Äî —è–∫ –º—ñ—Å—Ü–µ–≤–∏–π",
        "300 –≥—Ä–Ω ‚Äî –æ–¥–Ω–∞ —Å—Ç—Ä–∞–≤–∞ —ñ —Ä–æ–∑–º–æ–≤–∞",
        "500 –≥—Ä–Ω ‚Äî —ó–∂–∞ —è–∫ –ø—Ä–∏–≥–æ–¥–∞",
        "–©–æ –ø–æ—Ä–∞–¥–∏—Ç—å –æ—Ñ—ñ—Ü—ñ–∞–Ω—Ç"
    ]
    budget = random.choice(budgets)
    btns = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üíõ –ü—ñ–¥—Ç—Ä–∏–º–∞—Ç–∏ –ø—Ä–æ—î–∫—Ç", url=PUMB_URL)],
        [InlineKeyboardButton(text="‚úçÔ∏è –ó–∞–ª–∏—à–∏—Ç–∏ –≤—ñ–¥–≥—É–∫", callback_data="leave_feedback")],
        [InlineKeyboardButton(text="‚¨Ö –ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—å –≤ –º–µ–Ω—é", callback_data="leave_feedback")]
    ])
    await callback.message.answer(f"üéØ –¢–≤—ñ–π –±—é–¥–∂–µ—Ç: <b>{budget}</b>", reply_markup=btns)

async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
