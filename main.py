import os
import asyncio
import random
import aiohttp
from dotenv import load_dotenv
from aiogram import Bot, Dispatcher, types, F
from aiogram.types import (
    KeyboardButton, ReplyKeyboardMarkup,
    InlineKeyboardMarkup, InlineKeyboardButton,
    FSInputFile
)
from aiogram.enums import ParseMode

from places import get_random_places, get_directions_image_url

load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")
MY_ID = int(os.getenv("MY_ID", "909231739"))
PUMB_URL = "https://mobile-app.pumb.ua/VDdaNY9UzYmaK4fj8"

bot = Bot(token=BOT_TOKEN, default=types.ParseMode.HTML)
dp = Dispatcher()

user_feedback = {}
user_booking = {}

# ----- –ú–µ–Ω—é —Ç–∞ —Å—Ç–∞—Ä—Ç -----
@dp.message(F.text == "/start")
async def cmd_start(msg: types.Message):
    kb = ReplyKeyboardMarkup(resize_keyboard=True, keyboard=[
        [KeyboardButton("üéØ –†–∞–Ω–¥–æ–º –∑ 3 –ª–æ–∫–∞—Ü—ñ–π"),
         KeyboardButton("üéØ –†–∞–Ω–¥–æ–º –∑ 5 –ª–æ–∫–∞—Ü—ñ–π")],
        [KeyboardButton("üéØ –†–∞–Ω–¥–æ–º –∑ 10 –ª–æ–∫–∞—Ü—ñ–π"),
         KeyboardButton("üåü –§—ñ—Ä–º–æ–≤–∏–π –º–∞—Ä—à—Ä—É—Ç")]
    ])
    photo = FSInputFile("odesa_logo.jpg")
    await msg.answer_photo(
        photo=photo,
        caption="<b>–ü—Ä–∏–≤—ñ—Ç!</b> –û–±–µ—Ä–∏ —Ç–∏–ø –º–∞—Ä—à—Ä—É—Ç—É:",
        reply_markup=kb
    )

# ----- –†–∞–Ω–¥–æ–º–Ω—ñ –º–∞—Ä—à—Ä—É—Ç–∏ -----
@dp.message(F.text.startswith("üéØ –†–∞–Ω–¥–æ–º"))
async def random_route(msg: types.Message):
    # –ø–æ —Ç–µ–∫—Å—Ç—É –≤–∏–∑–Ω–∞—á–∞—î–º –∫—ñ–ª—å–∫—ñ—Å—Ç—å
    if "3" in msg.text: n = 3
    elif "5" in msg.text: n = 5
    else: n = 10
    await send_route(msg, n)

async def send_route(msg: types.Message, n: int):
    await msg.answer("üîÑ –®—É–∫–∞—é –º—ñ—Å—Ü—è –Ω–∞ –º–∞–ø—ñ‚Ä¶")
    places = get_random_places(n=n)
    if not places:
        return await msg.answer("üò¢ –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ –ª–æ–∫–∞—Ü—ñ—ó.")
    for i, p in enumerate(places, 1):
        caption = f"<b>{i}. {p['name']}</b>\n{p['address']}"
        if p.get("rating"):
            caption = f"‚≠ê{p['rating']}  " + caption
        kb = InlineKeyboardMarkup().add(
            InlineKeyboardButton("üó∫ –í—ñ–¥–∫—Ä–∏—Ç–∏ –Ω–∞ –º–∞–ø—ñ", url=p["url"])
        )
        if p.get("photo"):
            await msg.answer_photo(photo=p["photo"], caption=caption, reply_markup=kb)
        else:
            await msg.answer(caption, reply_markup=kb)

    link, img = get_directions_image_url(places)
    if img:
        async with aiohttp.ClientSession() as sess:
            r = await sess.get(img)
            if r.status == 200:
                data = await r.read()
                await msg.answer_photo(data, caption="üó∫ –ú–∞—Ä—à—Ä—É—Ç", parse_mode=None)
    if link:
        await msg.answer(f"üîó –ü–æ–¥–∏–≤–∏—Ç–∏—Å—è –≤ Google Maps:\n{link}")

# ----- –§—ñ—Ä–º–æ–≤–∏–π –º–∞—Ä—à—Ä—É—Ç -----
@dp.message(F.text == "üåü –§—ñ—Ä–º–æ–≤–∏–π –º–∞—Ä—à—Ä—É—Ç")
async def branded_route(msg: types.Message):
    await msg.answer("üîÑ –°—Ç–≤–æ—Ä—é—é —Ñ—ñ—Ä–º–æ–≤–∏–π –º–∞—Ä—à—Ä—É—Ç –∑ 3 —Ç–æ—á–æ–∫‚Ä¶")
    historical = [
        "museum", "art_gallery", "library",
        "church", "synagogue", "park",
        "historical_landmark", "monument"
    ]
    # 1) —ñ—Å—Ç–æ—Ä–∏—á–Ω–∞ –ª–æ–∫–∞—Ü—ñ—è
    places = get_random_places(n=1, allowed_types=historical)
    if not places:
        return await msg.answer("üò¢ –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ —ñ—Å—Ç–æ—Ä–∏—á–Ω—É –ª–æ–∫–∞—Ü—ñ—é.")
    p = places[0]
    kb = InlineKeyboardMarkup(row_width=1)
    kb.add(
        InlineKeyboardButton("‚û°Ô∏è –î–∞–ª—ñ ‚Äî GPS-—Ä–∞–Ω–¥–æ–º", callback_data="to_gps"),
        InlineKeyboardButton("üíõ –ü—ñ–¥—Ç—Ä–∏–º–∞—Ç–∏ –ø—Ä–æ—î–∫—Ç", url=PUMB_URL)
    )
    text = (
        f"1Ô∏è‚É£ <b>{p['name']}</b>\n"
        f"{p['address']}\n"
        f"<a href='{p['url']}'>üó∫ –í—ñ–¥–∫—Ä–∏—Ç–∏ –Ω–∞ –º–∞–ø—ñ</a>"
    )
    await msg.answer(text, reply_markup=kb)

@dp.callback_query(F.data == "to_gps")
async def cb_gps(q: types.CallbackQuery):
    lat = 46.4825 + random.uniform(-0.045, 0.045)
    lng = 30.7233 + random.uniform(-0.045, 0.045)
    kb = InlineKeyboardMarkup(row_width=1).add(
        InlineKeyboardButton("‚û°Ô∏è –î–∞–ª—ñ ‚Äî –ì–∞—Å—Ç—Ä–æ-—Ç–æ—á–∫–∞", callback_data="to_food"),
        InlineKeyboardButton("üíõ –ü—ñ–¥—Ç—Ä–∏–º–∞—Ç–∏ –ø—Ä–æ—î–∫—Ç", url=PUMB_URL)
    )
    text = f"2Ô∏è‚É£ –í–∏–ø–∞–¥–∫–æ–≤–∞ —Ç–æ—á–∫–∞\nüìç {lat:.5f}, {lng:.5f}\n<a href='https://maps.google.com/?q={lat},{lng}'>üó∫ –í—ñ–¥–∫—Ä–∏—Ç–∏</a>"
    await q.message.edit_reply_markup()  # –ø—Ä–∏–±–µ—Ä–µ–º–æ —Å—Ç–∞—Ä—ñ –∫–Ω–æ–ø–∫–∏
    await q.message.answer(text, reply_markup=kb)

@dp.callback_query(F.data == "to_food")
async def cb_food(q: types.CallbackQuery):
    food_types = ["restaurant", "cafe", "bakery"]
    p = get_random_places(n=1, allowed_types=food_types)[0]
    kb = InlineKeyboardMarkup(row_width=1).add(
        InlineKeyboardButton("üé≤ –û–±–µ—Ä–∏ –±—é–¥–∂–µ—Ç", callback_data="roll_budget"),
        InlineKeyboardButton("üíõ –ü—ñ–¥—Ç—Ä–∏–º–∞—Ç–∏ –ø—Ä–æ—î–∫—Ç", url=PUMB_URL)
    )
    text = (
        f"3Ô∏è‚É£ <b>{p['name']}</b>\n"
        f"{p['address']}\n"
        f"<a href='{p['url']}'>üó∫ –í—ñ–¥–∫—Ä–∏—Ç–∏ –Ω–∞ –º–∞–ø—ñ</a>"
    )
    await q.message.edit_reply_markup()
    await q.message.answer(text, reply_markup=kb)

@dp.callback_query(F.data == "roll_budget")
async def cb_budget(q: types.CallbackQuery):
    budgets = [
        "10 –≥—Ä–Ω ‚Äî —Å–º–∞–∫ –≤–∏–∂–∏–≤–∞–Ω–Ω—è", "50 –≥—Ä–Ω ‚Äî –±–∞–∑–∞—Ä–Ω–∏–π –¥–µ–ª—é–∫—Å",
        "100 –≥—Ä–Ω ‚Äî —è–∫ –º—ñ—Å—Ü–µ–≤–∏–π", "300 –≥—Ä–Ω ‚Äî –æ–¥–Ω–∞ —Å—Ç—Ä–∞–≤–∞",
        "500 –≥—Ä–Ω ‚Äî —ó–∂–∞ —è–∫ –ø—Ä–∏–≥–æ–¥–∞", "–©–æ –ø–æ—Ä–∞–¥–∏—Ç—å –æ—Ñ—ñ—Ü—ñ–∞–Ω—Ç"
    ]
    b = random.choice(budgets)
    kb = InlineKeyboardMarkup(row_width=1).add(
        InlineKeyboardButton("‚¨Ö –ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—å —É –º–µ–Ω—é", callback_data="back_to_menu"),
        InlineKeyboardButton("‚úçÔ∏è –í—ñ–¥–≥—É–∫", callback_data="leave_feedback")
    )
    await q.message.edit_reply_markup()
    await q.message.answer(f"üéØ –¢–≤—ñ–π –±—é–¥–∂–µ—Ç: <b>{b}</b>", reply_markup=kb)

@dp.callback_query(F.data == "back_to_menu")
async def cb_back(q: types.CallbackQuery):
    await cmd_start(q.message)

# ----- –í—ñ–¥–≥—É–∫–∏ -----
@dp.callback_query(F.data == "leave_feedback")
async def ask_review(q: types.CallbackQuery):
    user_feedback[q.from_user.id] = True
    await q.message.answer("–ù–∞–ø–∏—à–∏ —Å–≤—ñ–π –≤—ñ–¥–≥—É–∫ (–º–æ–∂–µ—à —Ñ–æ—Ç–æ)‚Ä¶")

@dp.message()
async def collect_review(msg: types.Message):
    if user_feedback.pop(msg.from_user.id, False):
        text = f"üì© –í—ñ–¥–≥—É–∫ –≤—ñ–¥ @{msg.from_user.username}:\n{msg.text or ''}"
        if msg.photo:
            await bot.send_photo(MY_ID, msg.photo[-1].file_id, caption=text)
        else:
            await bot.send_message(MY_ID, text)
        await msg.answer("–î—è–∫—É—é –∑–∞ –≤—ñ–¥–≥—É–∫! ‚ù§Ô∏è")

# ----- –ó–∞–ø—É—Å–∫ -----
async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
