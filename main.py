#–û–Ω–æ–≤–ª–µ–Ω–∏–π main.py –∑ Monobank URL —ñ –ø—É–±–ª—ñ—á–Ω–∏–º –¥–æ—Å—Ç—É–ø–æ–º –¥–æ –±–æ—Ç–∞

from aio gram import Bot, Dispatcher, types, F
from aiogram.types import Message, FSInputFile, InlineKeyboardMarkup, InlineKeyboardButton, KeyboardButton, ReplyKeyboardMarkup
from aiogram.enums import ParseMode
from aiogram.utils.keyboard import ReplyKeyboardBuilder
from aiogram.client.default import DefaultBotProperties
from dotenv import load_dotenv
import asyncio
import os

from places import get_random_places, get_directions_image_url

load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")
MY_ID = int(os.getenv("MY_ID", "909231739"))  # –¢–≤—ñ–π Telegram ID
MONOBANK_URL = "https://send.monobank.ua/jar/6B7BvEHqXG"  # –ó–∞–º—ñ–Ω–∏—Ç–∏ –Ω–∞ —Ç–≤—ñ–π –ª—ñ–Ω–∫

bot = Bot(token=BOT_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher()

# –î–æ–¥–∞—Ç–∫–æ–≤—ñ –∑–º—ñ–Ω–Ω—ñ –¥–ª—è —Å—Ç–∞–Ω—ñ–≤ –≤—ñ–¥–≥—É–∫—É
user_feedback_state = {}

@dp.message(F.text == "/start")
async def start_handler(message: Message):
    kb = ReplyKeyboardBuilder()
    kb.button(text="–©–æ —Ü–µ —Ç–∞–∫–µ?")
    kb.button(text="–Ø–∫ —Ü–µ –ø—Ä–∞—Ü—é—î?")
    kb.button(text="–í–∏—Ä—É—à–∏—Ç–∏ –Ω–∞ –ø—Ä–æ–≥—É–ª—è–Ω–∫—É")
    kb.button(text="–í–∞—Ä—ñ–∞–Ω—Ç–∏ –º–∞—Ä—à—Ä—É—Ç—ñ–≤")
    kb.button(text="–í—ñ–¥–≥—É–∫–∏")
    kb.button(text="–ó–∞–º–æ–≤–∏—Ç–∏ –ø—Ä–æ–≥—É–ª—è–Ω–∫—É –∑—ñ –º–Ω–æ—é")
    kb.button(text="–ü—ñ–¥—Ç—Ä–∏–º–∞—Ç–∏ –ø—Ä–æ—î–∫—Ç \"–û–¥–µ—Å–∞ –ù–∞–≤–º–∞–Ω–Ω—è\"")
    kb.adjust(2)

    photo = FSInputFile("odesa_logo.jpg")
    await message.answer_photo(
        photo=photo,
        caption=(
            "<b>–ü—Ä–∏–≤—ñ—Ç!</b> –¶–µ <i>–û–¥–µ—Å—Å–∞ –Ω–∞–≤–º–∞–Ω–Ω—è</i> ‚Äî —Ç–≤–æ—è –Ω–µ—Å–ø–æ–¥—ñ–≤–∞–Ω–∞, –∞–ª–µ –ø—Ä–æ–¥—É–º–∞–Ω–∞ –µ–∫—Å–∫—É—Ä—Å—ñ—è –º—ñ—Å—Ç–æ–º.\n\n"
            "–¢–∏ –Ω–µ –æ–±–∏—Ä–∞—î—à –º–∞—Ä—à—Ä—É—Ç ‚Äî –º–∞—Ä—à—Ä—É—Ç –æ–±–∏—Ä–∞—î —Ç–µ–±–µ.\n\n"
            "–û–±–µ—Ä–∏, –∑ —á–æ–≥–æ —Ö–æ—á–µ—à –ø–æ—á–∞—Ç–∏ üëá"
        ),
        reply_markup=kb.as_markup(resize_keyboard=True)
    )

@dp.message(F.text == "–ü—ñ–¥—Ç—Ä–∏–º–∞—Ç–∏ –ø—Ä–æ—î–∫—Ç \"–û–¥–µ—Å–∞ –ù–∞–≤–º–∞–Ω–Ω—è\"")
async def donate_handler(message: Message):
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üíõ –ü—ñ–¥—Ç—Ä–∏–º–∞—Ç–∏ –Ω–∞ Monobank", url=MONOBANK_URL)]
    ])
    await message.answer("–î—è–∫—É—î–º–æ –∑–∞ –ø—ñ–¥—Ç—Ä–∏–º–∫—É! üôè", reply_markup=keyboard)

# –û–±—Ä–æ–±–∫–∞ –º–∞—Ä—à—Ä—É—Ç—É
@dp.message(F.text.startswith("–ú–∞—Ä—à—Ä—É—Ç –∑"))
async def route_handler(message: Message):
    if "3" in message.text:
        await send_route(message, 3)
    elif "5" in message.text:
        await send_route(message, 5)
    elif "10" in message.text:
        await send_route(message, 10)

async def send_route(message: Message, count: int):
    await message.answer("üîÑ –®—É–∫–∞—é —Ü—ñ–∫–∞–≤—ñ –º—ñ—Å—Ü—è –Ω–∞ –º–∞–ø—ñ‚Ä¶")
    places = get_random_places(count)

    if not places:
        await message.reply("–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ –ª–æ–∫–∞—Ü—ñ—ó üòû –°–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑.")
        return

    for i, place in enumerate(places, 1):
        caption = f"<b>{i}. {place['name']}</b>\n"
        if place.get("rating"):
            caption += f"‚≠ê {place['rating']} ({place.get('reviews', 0)} –≤—ñ–¥–≥—É–∫—ñ–≤)\n"
        caption += f"{place.get('address', '')}"

        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üó∫ –í—ñ–¥–∫—Ä–∏—Ç–∏ –Ω–∞ –º–∞–ø—ñ", url=place["url"])]
        ])

        if place.get("photo"):
            await message.answer_photo(photo=place["photo"], caption=caption, reply_markup=keyboard)
        else:
            await message.answer(caption, reply_markup=keyboard)

    # –ö–∞—Ä—Ç–∏–Ω–∫–∞ + –º–∞—Ä—à—Ä—É—Ç
    map_url, directions_url = get_directions_image_url(places)
    await message.answer_photo(photo=map_url, caption="üó∫ –û—Å—å —Ç–≤—ñ–π –º–∞—Ä—à—Ä—É—Ç!", reply_markup=InlineKeyboardMarkup(
        inline_keyboard=[[InlineKeyboardButton(text="üîó –í—ñ–¥–∫—Ä–∏—Ç–∏ –º–∞—Ä—à—Ä—É—Ç —É Google Maps", url=directions_url)]]))

    # –î–æ–¥–∞—Ç–∏ –∫–Ω–æ–ø–∫–∏ –ü—ñ–¥—Ç—Ä–∏–º–∞—Ç–∏ / –í—ñ–¥–≥—É–∫
    buttons = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üíõ –ü—ñ–¥—Ç—Ä–∏–º–∞—Ç–∏ –ø—Ä–æ—î–∫—Ç", url=MONOBANK_URL)],
        [InlineKeyboardButton(text="‚úçÔ∏è –ó–∞–ª–∏—à–∏—Ç–∏ –≤—ñ–¥–≥—É–∫", callback_data="leave_feedback")]
    ])
    await message.answer("–©–æ —Å–∫–∞–∂–µ—à –ø—ñ—Å–ª—è –ø—Ä–æ–≥—É–ª—è–Ω–∫–∏?", reply_markup=buttons)

@dp.callback_query(F.data == "leave_feedback")
async def ask_feedback(callback: types.CallbackQuery):
    user_feedback_state[callback.from_user.id] = True
    await callback.message.answer("–ù–∞–ø–∏—à–∏ —Å–≤—ñ–π –≤—ñ–¥–≥—É–∫ (–¥–æ 256 —Å–∏–º–≤–æ–ª—ñ–≤) —ñ –º–æ–∂–µ—à –¥–æ–¥–∞—Ç–∏ 1 —Ñ–æ—Ç–æ üìùüì∏")

@dp.message(F.photo | F.text)
async def collect_feedback(message: Message):
    if user_feedback_state.get(message.from_user.id):
        user_feedback_state[message.from_user.id] = False

        # –ù–∞–¥—Å–∏–ª–∞–Ω–Ω—è –∞–¥–º—ñ–Ω—É
        caption = f"üìù –ù–æ–≤–∏–π –≤—ñ–¥–≥—É–∫ –≤—ñ–¥ @{message.from_user.username or message.from_user.first_name} (ID {message.from_user.id}):\n"
        if message.text:
            caption += message.text

        if message.photo:
            photo = message.photo[-1].file_id
            await bot.send_photo(MY_ID, photo=photo, caption=caption)
        else:
            await bot.send_message(MY_ID, caption)

        # –î—è–∫—É—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É + –∫–Ω–æ–ø–∫–∞ –ø—ñ–¥—Ç—Ä–∏–º–∫–∏
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üíõ –ü—ñ–¥—Ç—Ä–∏–º–∞—Ç–∏ –Ω–∞ Monobank", url=MONOBANK_URL)]
        ])
        await message.answer("–î—è–∫—É—î–º–æ –∑–∞ –≤—ñ–¥–≥—É–∫! üíå", reply_markup=keyboard)

async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
