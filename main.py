from aiogram import Bot, Dispatcher, types, F
from aiogram.types import Message, FSInputFile, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.enums import ParseMode
from aiogram.utils.keyboard import ReplyKeyboardBuilder
from aiogram.client.default import DefaultBotProperties
from dotenv import load_dotenv
import asyncio
import os

from places import get_random_places

load_dotenv()

BOT_TOKEN = os.getenv("BOT_TOKEN")
bot = Bot(token=BOT_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher()
MY_ID = 909231739  # –ó–∞–º–µ–Ω–∏ –Ω–∞ —Å–≤–æ–π Telegram user_id

def is_authorized(user_id):
    return user_id == MY_ID

@dp.message(F.text == "/start")
async def start_handler(message: Message):
    kb = ReplyKeyboardBuilder()
    kb.button(text="–©–æ —Ü–µ —Ç–∞–∫–µ?")
    kb.button(text="–Ø–∫ —Ü–µ –ø—Ä–∞—Ü—é—î?")
    kb.button(text="–í–∏—Ä—É—à–∏—Ç–∏ –Ω–∞ –ø—Ä–æ–≥—É–ª—è–Ω–∫—É")
    kb.button(text="–í–∞—Ä—ñ–∞–Ω—Ç–∏ –º–∞—Ä—à—Ä—É—Ç—ñ–≤")
    kb.button(text="–í—ñ–¥–≥—É–∫–∏")
    kb.adjust(2)
    photo = FSInputFile("odesa_logo.jpg")
    await message.answer_photo(
        photo=photo,
        caption=(
            "<b>–ü—Ä–∏–≤—ñ—Ç!</b> –¶–µ <i>–û–¥–µ—Å—Å–∞ –Ω–∞–≤–º–∞–Ω–Ω—è</i> ‚Äî —Ç–≤–æ—è –Ω–µ—Å–ø–æ–¥—ñ–≤–∞–Ω–∞, –∞–ª–µ –ø—Ä–æ–¥—É–º–∞–Ω–∞ –µ–∫—Å–∫—É—Ä—Å—ñ—è –º—ñ—Å—Ç–æ–º.\n\n"
            "–¢–∏ –Ω–µ –æ–±–∏—Ä–∞—î—à –º–∞—Ä—à—Ä—É—Ç ‚Äî –º–∞—Ä—à—Ä—É—Ç –æ–±–∏—Ä–∞—î —Ç–µ–±–µ.\n\n"
            "–ë–æ—Ç –ø—Ä–æ–≤–µ–¥–µ —Ç–µ–±–µ –≤ —Ç—ñ –º—ñ—Å—Ü—è –û–¥–µ—Å–∏, —è–∫—ñ —Ç–∏ –º—ñ–≥ —Ä–æ–∫–∞–º–∏ –ø—Ä–æ—Ö–æ–¥–∏—Ç–∏ –ø–æ–≤–∑. "
            "–í–∏–ø–∞–¥–∫–æ–≤—ñ, –µ–º–æ—Ü—ñ–π–Ω—ñ, –∂–∏–≤—ñ.\n\n"
            "–û–±–µ—Ä–∏ –Ω–∏–∂—á–µ, –∑ —á–æ–≥–æ —Ö–æ—á–µ—à –ø–æ—á–∞—Ç–∏ üëá"
        ),
        reply_markup=kb.as_markup(resize_keyboard=True)
    )

@dp.message(F.text == "–í–∏—Ä—É—à–∏—Ç–∏ –Ω–∞ –ø—Ä–æ–≥—É–ª—è–Ω–∫—É")
async def self_guided(message: Message):
    kb = ReplyKeyboardBuilder()
    kb.button(text="–ú–∞—Ä—à—Ä—É—Ç –∑ 3 –ª–æ–∫–∞—Ü—ñ—ó (29 –≥—Ä–Ω)")
    kb.button(text="–ú–∞—Ä—à—Ä—É—Ç –∑ 5 –ª–æ–∫–∞—Ü—ñ–π (49 –≥—Ä–Ω)")
    kb.button(text="–ú–∞—Ä—à—Ä—É—Ç –∑ 10 –ª–æ–∫–∞—Ü—ñ–π (79 –≥—Ä–Ω)")
    kb.button(text="‚¨Ö –ù–∞–∑–∞–¥")
    kb.adjust(1)
    await message.answer(
        "<b>–í–∞—Ä—ñ–∞–Ω—Ç–∏ —Å–∞–º–æ—Å—Ç—ñ–π–Ω–∏—Ö –º–∞—Ä—à—Ä—É—Ç—ñ–≤:</b>\n\n"
        "üìç <b>–ú–∞—Ä—à—Ä—É—Ç –∑ 3 –ª–æ–∫–∞—Ü—ñ—ó</b> ‚Äî 29 –≥—Ä–Ω\n"
        "üìç <b>–ú–∞—Ä—à—Ä—É—Ç –∑ 5 –ª–æ–∫–∞—Ü—ñ–π</b> ‚Äî 49 –≥—Ä–Ω\n"
        "üìç <b>–ú–∞—Ä—à—Ä—É—Ç –∑ 10 –ª–æ–∫–∞—Ü—ñ–π</b> ‚Äî 79 –≥—Ä–Ω\n\n"
        "–ü—ñ—Å–ª—è –æ–ø–ª–∞—Ç–∏ –≤–∏ –º–∏—Ç—Ç—î–≤–æ –æ—Ç—Ä–∏–º–∞—î—Ç–µ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –º–∞—Ä—à—Ä—É—Ç —É Google Maps –∑ –æ–ø–∏—Å–æ–º —É—Å—ñ—Ö –ª–æ–∫–∞—Ü—ñ–π üíå",
        reply_markup=kb.as_markup(resize_keyboard=True)
    )

@dp.message(F.text == "‚¨Ö –ù–∞–∑–∞–¥")
async def go_back(message: Message):
    await start_handler(message)

@dp.message(F.text == "–ú–∞—Ä—à—Ä—É—Ç –∑ 3 –ª–æ–∫–∞—Ü—ñ—ó (29 –≥—Ä–Ω)")
async def route_3(message: Message):
    await send_fake_paid_route(message, 3)

@dp.message(F.text == "–ú–∞—Ä—à—Ä—É—Ç –∑ 5 –ª–æ–∫–∞—Ü—ñ–π (49 –≥—Ä–Ω)")
async def route_5(message: Message):
    await send_fake_paid_route(message, 5)

@dp.message(F.text == "–ú–∞—Ä—à—Ä—É—Ç –∑ 10 –ª–æ–∫–∞—Ü—ñ–π (79 –≥—Ä–Ω)")
async def route_10(message: Message):
    await send_fake_paid_route(message, 10)

@dp.message(F.text.startswith("/getroute"))
async def send_route(message: Message):
    if not is_authorized(message.from_user.id):
        await message.reply("–¶–µ–π –±–æ—Ç —â–µ –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∏–π –ø—É–±–ª—ñ—á–Ω–æ ü§ì")
        return
    try:
        count = int(message.text.split(" ")[1])
        if count not in [3, 5, 10]:
            raise ValueError
    except:
        await message.reply("–í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è: /getroute 3 –∞–±–æ /getroute 5 –∞–±–æ /getroute 10")
        return
    await send_fake_paid_route(message, count)

async def send_fake_paid_route(message: Message, count: int):
    await message.answer("üîÑ –®—É–∫–∞—é —Ü—ñ–∫–∞–≤—ñ –º—ñ—Å—Ü—è –Ω–∞ –º–∞–ø—ñ‚Ä¶")
    places = get_random_places(count)

    if not places:
        await message.reply("–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ –ª–æ–∫–∞—Ü—ñ—ó üòû –°–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑.")
        return

    for i, place in enumerate(places, 1):
        btn = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üó∫ –í—ñ–¥–∫—Ä–∏—Ç–∏ –Ω–∞ –º–∞–ø—ñ", url=place["url"])]
        ])

        caption = f"<b>{i}. {place['name']}</b>\n"
        if place.get("rating"):
            caption += f"‚≠ê {place['rating']}\n"
        if place.get("address"):
            caption += f"{place['address']}\n"

        if place.get("photo_url"):
            await message.answer_photo(photo=place["photo_url"], caption=caption, reply_markup=btn)
        else:
            await message.answer(caption, reply_markup=btn)

async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
